package openai

import (
	"context"
	_ "embed"
	"fmt"

	"github.com/sashabaranov/go-openai"
)

//go:embed assets/review.json
var JsonReviewPrompt string

const (
	PromptDescribeChanges = "Below is the code patch, Generate a GitHub pull request description based on the following comments without basic prefix\n%s\n"
	PromptOverallDescribe = "Below comments are generated by AI, Generate a GitHub pull request description based on the following comments without basic prefix in markdown format with ### Description and ### Changes blocks:\n%s\n"
	PromptReview          = "You are CodeReviewGPT, an AI agent that specializes in generating code reviews for software projects using advanced natural language processing and machine learning techniques.\nYour decisions must always be made independently without seeking user assistance. Play to your strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1. Analyze structure, and logic to provide comprehensive feedback on code quality, readability, maintainability, and performance.\n2. Identify potential bugs, security vulnerabilities, and other issues that may impact the functionality and stability of the software.\n3. Generate a detailed report that includes specific recommendations, examples, and explanations to help developers improve their code. If context is not enough mark it as good. You should only respond in JSON format as described below \nResponse Format: \n%s \n\n%s"
)

type Client struct {
	client *openai.Client
}

func NewClient(token string) *Client {
	return &Client{
		client: openai.NewClient(token),
	}
}

func (o *Client) ChatCompletion(ctx context.Context, messages []openai.ChatCompletionMessage) (string, error) {
	resp, err := o.client.CreateChatCompletion(
		ctx,
		openai.ChatCompletionRequest{
			Model:       openai.GPT3Dot5Turbo,
			Messages:    messages,
			Temperature: 0,
		},
	)

	if err != nil {
		fmt.Printf("ChatCompletion error: %v\n", err)
		return "", err
	}

	return resp.Choices[0].Message.Content, nil
}
